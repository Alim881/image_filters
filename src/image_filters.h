#ifndef IMAGE_FILTERS_H
#define IMAGE_FILTERS_H

#include <png.h>
#include <string>
#include <vector>

/**
 * \file
 * \brief Заголовочный файл для класса Image и функций обработки изображений
 */

/**
 * @class Image
 * @brief Класс для работы с изображениями в формате PNG.
 *
 * Класс Image предоставляет методы для загрузки, сохранения и манипуляции пикселями изображения,
 * используя библиотеку libpng. Изображение хранится в формате RGBA.
 */
class Image {
public:
    /**
     * @brief Загружает изображение из файла PNG.
     *
     * Загружает изображение, проверяет его формат и сохраняет данные в поле pixels.
     * Поддерживает преобразование палитры, серого изображения и прозрачности в RGBA.
     *
     * @param filename Путь к файлу PNG.
     * @return true, если загрузка прошла успешно; false, если файл не существует или имеет неверный формат.
     */
    bool load(const std::string &filename);

    /**
     * @brief Сохраняет изображение в файл PNG.
     *
     * Сохраняет текущее состояние изображения в указанный файл в формате RGBA.
     *
     * @param filename Путь к файлу для сохранения.
     * @return true, если сохранение прошло успешно; false, если файл не удалось создать или записать.
     */
    bool save(const std::string &filename) const;

    /**
     * @brief Возвращает ширину изображения в пикселях.
     *
     * @return Целое число, представляющее ширину изображения; 0, если изображение не загружено.
     */
    int getWidth() const { return width; }

    /**
     * @brief Возвращает высоту изображения в пикселях.
     *
     * @return Целое число, представляющее высоту изображения; 0, если изображение не загружено.
     */
    int getHeight() const { return height; }

    /**
     * @brief Получает цвет пикселя в указанных координатах.
     *
     * Возвращает RGBA-значение пикселя в позиции (x, y). Если координаты вне границ,
     * возвращается чёрный пиксель с полной непрозрачностью (0, 0, 0, 255).
     *
     * @param x Координата x (по горизонтали).
     * @param y Координата y (по вертикали).
     * @return Вектор из 4 байтов, представляющий цвет RGBA.
     */
    std::vector<unsigned char> getPixel(int x, int y) const;

    /**
     * @brief Устанавливает цвет пикселя в указанных координатах.
     *
     * Устанавливает RGBA-значение пикселя в позиции (x, y). Если координаты вне границ,
     * ничего не происходит.
     *
     * @param x Координата x (по горизонтали).
     * @param y Координата y (по вертикали).
     * @param color Вектор из 4 байтов, представляющий цвет RGBA.
     */
    void setPixel(int x, int y, const std::vector<unsigned char> &color);

private:
    /**
     * @brief Ширина изображения в пикселях.
     *
     * Хранит ширину загруженного изображения; 0, если изображение не загружено.
     */
    int width = 0;

    /**
     * @brief Высота изображения в пикселях.
     *
     * Хранит высоту загруженного изображения; 0, если изображение не загружено.
     */
    int height = 0;

    /**
     * @brief Массив пикселей изображения в формате RGBA.
     *
     * Хранит данные изображения в виде трёхмерного вектора: [y][x][RGBA].
     * Каждый пиксель представлен четырьмя значениями (красный, зелёный, синий, альфа).
     */
    std::vector<std::vector<std::vector<unsigned char>>> pixels; // [y][x][RGBA]
};

/**
 * @brief Применяет эффект солнечных лучей к изображению.
 *
 * Добавляет радиальный эффект, увеличивая яркость пикселей в зависимости от их
 * расстояния от центра изображения и угла.
 *
 * @param img Изображение, к которому применяется эффект.
 */
void applySolarRays(Image &img);

/**
 * @brief Применяет эффект волнового искажения к изображению.
 *
 * Смещает пиксели изображения на основе синусоидальной и косинусоидальной функций,
 * создавая эффект волн.
 *
 * @param img Изображение, к которому применяется эффект.
 * @param amplitude Амплитуда волнового искажения (по умолчанию 10.0).
 */
void applyWaveDistortion(Image &img, float amplitude = 10.0f);

/**
 * @brief Добавляет случайный цветовой шум к изображению.
 *
 * Применяет случайные изменения к RGB-каналам каждого пикселя, основываясь на
 * заданной интенсивности шума.
 *
 * @param img Изображение, к которому применяется шум.
 * @param intensity Интенсивность шума (по умолчанию 0.1).
 */
void applyColorNoise(Image &img, float intensity = 0.1f);

/**
 * @brief Применяет эффект глитча к изображению.
 *
 * Сдвигает строки пикселей и выборочно изменяет цветовые каналы, создавая эффект
 * цифрового сбоя.
 *
 * @param img Изображение, к которому применяется эффект.
 */
void applyGlitch(Image &img);

/**
 * @brief Преобразует изображение в оттенки серого.
 *
 * Преобразует каждый пиксель в оттенок серого, используя стандартные веса
 * для RGB-каналов (0.299R + 0.587G + 0.114B).
 *
 * @param img Изображение, к которому применяется преобразование.
 */
void applyGrayscale(Image &img);

#endif // IMAGE_FILTERS_H
